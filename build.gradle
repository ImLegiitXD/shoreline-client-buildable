import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import com.google.gson.JsonParser

import java.nio.file.Files
import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

buildConfig {
    buildConfigField(String, "HASH", "${execute("git rev-parse --short HEAD")}")
    buildConfigField(String, "VERSION", project.mod_version)
    buildConfigField(String, "BUILD_NUMBER", project.build_number)
    buildConfigField(String, "BUILD_IDENTIFIER", project.build_identifier)
    buildConfigField(String, "BUILD_TIME", "${new Date(System.currentTimeMillis()).format("MM/dd/yyyy HH:mm")}")

    packageName "net.shoreline.client"
    useJavaOutput()
    generateAtSync = true
    documentation.set("Generated by BuildConfig plugin")
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

loom {
    accessWidenerPath = file("src/main/resources/shoreline.accesswidener")
}

repositories {
    mavenCentral() {
        url "https://jitpack.io"
        url "https://impactdevelopment.github.io/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "cabaletta:baritone-api:${baritone_api_version}"
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
    dependsOn generateBuildConfig
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    doFirst {
        copy {
            from zipTree(tasks.remapJar.archivePath)
            into tempDir
        }

        File fabricModFile = new File(tempDir, 'fabric.mod.json')
        if (fabricModFile.exists()) {
            def text = fabricModFile.text

            Gson gson = new GsonBuilder().setPrettyPrinting().create()
            JsonObject obj = JsonParser.parseString(text)

            JsonArray mixins = new JsonArray()
            mixins.add("mixins.shoreline.plugin.json")

            obj.add("mixins", mixins)
            //obj.remove("accessWidener")

            fabricModFile.text = gson.toJson(obj)
        }
    }
}

tasks.register('clientJar', Jar) {
    dependsOn remapJar

    outputs.upToDateWhen { false }

    from(zipTree(tasks.remapJar.archivePath))

    include 'net/shoreline/client/**'
    include 'net/shoreline/eventbus/**'
    include 'assets/**'
    include 'shoreline-refmap.json'
    include 'shoreline.accesswidener'

    archiveBaseName = "client-raw"
    archiveClassifier = ""
    archiveVersion = ""

    doFirst {
        copy {
            from zipTree(tasks.clientJar.archivePath)
            into tempDir
        }

        File shorelineRefmap = new File(tempDir, 'shoreline-refmap.json')
        if (shorelineRefmap.exists()) {
            def text = shorelineRefmap.text
            text = text.replaceAll('/', '.')
            shorelineRefmap.text = text
        }
    }
}

build.dependsOn(clientJar)

def execute(String cmd) {
    try {
        final def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}