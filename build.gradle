import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import com.google.gson.JsonParser

import java.nio.file.Files
import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

buildConfig {
    buildConfigField(String, "HASH", "${execute("git rev-parse --short HEAD")}")
    buildConfigField(String, "VERSION", project.mod_version)
    buildConfigField(String, "BUILD_NUMBER", project.build_number)
    buildConfigField(String, "BUILD_IDENTIFIER", project.build_identifier)
    buildConfigField(String, "BUILD_TIME", "${new Date(System.currentTimeMillis()).format("MM/dd/yyyy HH:mm")}")

    packageName "net.shoreline.client"
    useJavaOutput()
    generateAtSync = true
    documentation.set("Generated by BuildConfig plugin")
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

loom {
    accessWidenerPath = file("src/main/resources/shoreline.accesswidener")
}

repositories {
    mavenCentral() {
        url "https://jitpack.io"
        url "https://impactdevelopment.github.io/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "cabaletta:baritone-api:${baritone_api_version}"
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 21

    // Make this run before the compileJava task
    dependsOn generateBuildConfig
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('buildClientOnly') {
    doFirst {
        tasks.remapLoader.enabled = false
    }

    finalizedBy 'build'
}

tasks.register('loaderJar', Jar) {
    dependsOn remapJar

    outputs.upToDateWhen { false }

    // Rename mixins.shoreline.json to mixins.shoreline.plugin.json automatically on build
    // and remove the accessWidener entry from fabric.mod.json
    def tempDir = new File("${buildDir}/tmp", "tempLoaderJar")

    if (tempDir.exists())
    {
        Files.walk(tempDir.toPath())
                .sorted(Comparator.reverseOrder())
                .map(java.nio.file.Path::toFile)
                .forEach(File::delete)

        tempDir.delete()
    }

    tempDir.mkdirs()

    doFirst {
        copy {
            from zipTree(tasks.remapJar.archivePath)
            into tempDir
        }

        File fabricModFile = new File(tempDir, 'fabric.mod.json')
        if (fabricModFile.exists())
        {
            def text = fabricModFile.text

            Gson gson = new GsonBuilder().setPrettyPrinting().create()
            JsonObject obj = JsonParser.parseString(text)

            JsonArray mixins = new JsonArray()
            mixins.add("mixins.shoreline.plugin.json");

            obj.add("mixins", mixins)
            obj.remove("accessWidener")

            fabricModFile.text = gson.toJson(obj)
        }
    }

    from(tempDir) {
        exclude 'net/shoreline/client/**'
//        exclude 'net/shoreline/eventbus/annotation/**'
//        exclude 'net/shoreline/eventbus/dev/**'
//        exclude 'net/shoreline/eventbus/event/**'
        exclude 'net/shoreline/eventbus/**'
        exclude 'assets/**'
        exclude 'mixins.shoreline.json'
        exclude 'shoreline-refmap.json'
        exclude 'shoreline.accesswidener'
    }

    archiveBaseName = "loader-raw"
    archiveClassifier = ""
    archiveVersion = ""
}

tasks.register('clientJar', Jar) {
    dependsOn remapJar

    outputs.upToDateWhen { false }

    from(zipTree(tasks.remapJar.archivePath))

    include 'net/shoreline/client/**'
    include 'net/shoreline/eventbus/**'
//    include 'net/shoreline/eventbus/annotation/**'
//    include 'net/shoreline/eventbus/event/**'
    include 'assets/**'
    include 'shoreline-refmap.json'
    include 'shoreline.accesswidener'

    archiveBaseName = "client-raw"
    archiveClassifier = ""
    archiveVersion = ""
}

tasks.register('remapLoader', Exec) {
    outputs.upToDateWhen { false }

    commandLine 'java', '-jar', 'proguard/proguard.jar',
            '@proguard/configs/loader.txt',
            '-injars', tasks.loaderJar.archiveFile.get().asFile,
            '-outjars', "${buildDir}/libs/loader-remapped.jar",
            '-libraryjars', "proguard/libs/java/java.base.jmod",
            '-libraryjars', "${buildDir}/libs/client-raw.jar",
            '-printmapping', "proguard/mappings/loader-mappings.txt",
            '-applymapping', "proguard/mappings/pre-loader-mappings.txt"

    dependsOn tasks.loaderJar
}

tasks.register('remapClient', Exec) {
    outputs.upToDateWhen { false }
    // Proguard can't remap resource files where fully qualified class names are
    // seperated by slashes and not periods (amazing)

    // So we are replacing all the slashes in the refmap with periods so proguard
    // can remap the mixin refmap correctly, then we will change the periods back
    // to slashes after proguard obfuscates
    def tempDir = new File("${buildDir}/tmp", "tempRemapClient")

    if (tempDir.exists())
    {
        Files.walk(tempDir.toPath())
                .sorted(Comparator.reverseOrder())
                .map(java.nio.file.Path::toFile)
                .forEach(File::delete)

        tempDir.delete()
    }

    tempDir.mkdirs()

    doFirst {
        copy {
            from zipTree(tasks.clientJar.archivePath)
            into tempDir
        }

        File shorelineRefmap = new File(tempDir, 'shoreline-refmap.json')
        if (shorelineRefmap.exists())
        {
            def text = shorelineRefmap.text
            text = text.replaceAll('/', '.')
            shorelineRefmap.text = text
        }
    }

    // combine the loader mappings and the pre-client mappings

    def combinedMappings = file("${buildDir}/tmp/combined-mappings.txt")

    if (combinedMappings.exists())
    {
        combinedMappings.delete()
    }

    combinedMappings.createNewFile()

    def preClientMappings = file('proguard/mappings/pre-client-mappings.txt')
    def loaderMappings = file('proguard/mappings/loader-mappings.txt')

    combinedMappings.text = preClientMappings.text + System.lineSeparator() + loaderMappings.text

    commandLine 'java', '-jar', 'proguard/proguard.jar',
            '@proguard/configs/client.txt',
            '-injars', tempDir,
            '-outjars', "${buildDir}/tmp/temp-client-remap.jar",
            '-libraryjars', "proguard/libs/java/java.base.jmod",
            '-libraryjars', "proguard/libs/mc",
            '-libraryjars', "${buildDir}/libs/loader-raw.jar",
            '-printmapping', "proguard/mappings/client-mappings.txt",
            '-applymapping', combinedMappings

    // Replace all the periods to slashes in the refmap, and copy over to build/libs/
    doLast {
        def remapJar = new File("${buildDir}/tmp/temp-client-remap.jar")
        def finalClientJar = new File("${buildDir}/libs/client-remapped.jar")

        JarFile jarFile = new JarFile(remapJar)
        JarOutputStream jos = new JarOutputStream(new FileOutputStream(finalClientJar))

        jarFile.entries().each { JarEntry entry ->
            InputStream is = jarFile.getInputStream(entry)
            JarEntry newEntry = new JarEntry(entry.name)

            jos.putNextEntry(newEntry)

            if (entry.name == 'shoreline-refmap.json')
            {
                def text = is.text
                text = text.replaceAll('\\.', '/')
                jos.write(text.bytes)
            } else
            {
                jos.write(is.bytes)
            }

            jos.closeEntry()
            is.close()
        }

        jos.close()
        jarFile.close()
    }

    dependsOn tasks.remapLoader
}

build.dependsOn(loaderJar, clientJar, remapLoader, remapClient)

def execute(String cmd) {
    try {
        final def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}