plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.gmazzo.buildconfig' version '5.3.5'
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

buildConfig {
    buildConfigField(String, "HASH", "${execute("git rev-parse --short HEAD")}")
    buildConfigField(String, "VERSION", project.mod_version)
    buildConfigField(String, "BUILD_NUMBER", project.build_number)
    buildConfigField(String, "BUILD_IDENTIFIER", project.build_identifier)
    buildConfigField(String, "BUILD_TIME", "${new Date(System.currentTimeMillis()).format("MM/dd/yyyy HH:mm")}")

    packageName "net.shoreline.client"
    useJavaOutput()
    generateAtSync = true
    documentation.set("Generated by BuildConfig plugin")
}

sourceSets.main.java.srcDirs += "build/gen/buildconfig/src/main"

loom {
    accessWidenerPath = file("src/main/resources/shoreline.accesswidener")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://impactdevelopment.github.io/maven/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "cabaletta:baritone-api:${baritone_api_version}"
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version

        filter { String line ->
            if (line.trim().startsWith('"accessWidener"')) {
                return null
            }
            if (line.trim().startsWith('"mixins"')) {
                return null
            }
            if (line.trim().startsWith('}') && !line.contains('"mixins"')) {
                return '  "mixins": ["mixins.shoreline.plugin.json"],\n' + line
            }
            return line
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
    dependsOn generateBuildConfig
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.output) {
        exclude 'fabric.mod.json'
    }

    from(processResources) {
        include 'fabric.mod.json'
    }
}

def execute(String cmd) {
    try {
        final def stdout = new ByteArrayOutputStream()

        exec {
            commandLine cmd.split(" ")
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return null
    }
}